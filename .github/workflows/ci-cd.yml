name: Jurassic Park CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_BACKEND_IMAGE: clovis98/incident-backend
  DOCKER_FRONTEND_IMAGE: clovis98/incident-frontend
  TAG: latest

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run tests
        working-directory: ./backend
        run: npm test

  docker-build-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: clovis98
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build & Push Backend
        run: |
          docker build \
            -t $DOCKER_BACKEND_IMAGE:$TAG \
            -f docker/backend/Dockerfile .
          docker push $DOCKER_BACKEND_IMAGE:$TAG

      - name: Build & Push Frontend
        run: |
          docker build \
            -t $DOCKER_FRONTEND_IMAGE:$TAG \
            -f docker/frontend/Dockerfile .
          docker push $DOCKER_FRONTEND_IMAGE:$TAG

  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
          kubectl config set-context --current --namespace=default

      - name: Deploy Application
        run: |
          kubectl apply -f k8s/ -R
          kubectl rollout status deployment/backend
          kubectl rollout status deployment/frontend

      - name: Verify Deployment
        run: |
          kubectl get pods -o wide
          kubectl get svc
          kubectl get ingress